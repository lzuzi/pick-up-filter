plugins {
    id 'net.minecraftforge.gradle' version "${minecraftforgegradle_version}"
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = ""
group = mod_group_id_forge

base {
    archivesName = "${mod_id}-v${mod_version}-forge-${minecraft_version}"
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    reobf = false
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')

//            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'eventbus.api.strictRuntimeChecks', 'true'
//            arg "-mixin.config=${mod_id}.mixins.json"
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'net.minecraftforge:eventbus-validator:7.0-beta.10'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation project(":common")
}

evaluationDependsOn(":common")

afterEvaluate {
    tasks.named("jar", Jar).configure {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        from(project(":common").sourceSets.main.output)
        manifest {
            attributes([
                    'Specification-Title'     : mod_id,
                    'Specification-Vendor'    : mod_authors,
                    'Specification-Version'   : mod_version,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : mod_authors
            ])
            attributes['MixinConfigs'] = "${mod_id}.mixins.json"
        }
    }
}

mixin {
    add sourceSets.main, 'pickupfilter.refmap.json'
    config 'pickupfilter.mixins.json'
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}
